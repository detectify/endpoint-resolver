// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/hexdigest/gowrap/6c8f05695fec23df85903a8da0af66ac414e2a63/templates/opentelemetry
// gowrap: http://github.com/hexdigest/gowrap

package opentelemetry

//go:generate gowrap gen -p github.com/detectify/endpoint-resolver -i Resolver -t https://raw.githubusercontent.com/hexdigest/gowrap/6c8f05695fec23df85903a8da0af66ac414e2a63/templates/opentelemetry -o resolver.go -l ""

import (
	"context"

	endpointresolver "github.com/detectify/endpoint-resolver"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/trace"
)

// ResolverWithTracing implements endpointresolver.Resolver interface instrumented with opentracing spans
type ResolverWithTracing struct {
	endpointresolver.Resolver
	_instance      string
	_spanDecorator func(span trace.Span, params, results map[string]interface{})
}

// NewResolverWithTracing returns ResolverWithTracing
func NewResolverWithTracing(base endpointresolver.Resolver, instance string, spanDecorator ...func(span trace.Span, params, results map[string]interface{})) ResolverWithTracing {
	d := ResolverWithTracing{
		Resolver:  base,
		_instance: instance,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	}

	return d
}

// Resolve implements endpointresolver.Resolver
func (_d ResolverWithTracing) Resolve(ctx context.Context, conf endpointresolver.ResolveConf) (urls []string, err error) {
	ctx, _span := otel.Tracer(_d._instance).Start(ctx, "endpointresolver.Resolver.Resolve")
	defer func() {
		if _d._spanDecorator != nil {
			_d._spanDecorator(_span, map[string]interface{}{
				"ctx":  ctx,
				"conf": conf}, map[string]interface{}{
				"urls": urls,
				"err":  err})
		} else if err != nil {
			_span.RecordError(err)
			_span.SetAttributes(
				attribute.String("event", "error"),
				attribute.String("message", err.Error()),
			)
		}

		_span.End()
	}()
	return _d.Resolver.Resolve(ctx, conf)
}
